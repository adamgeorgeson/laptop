#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    rbenv rehash
  fi
}

install_xcode_command_line_tools() {
if [ -z "$(xcode-select --print-path 2>/dev/null)" ] || [ -z "$(git --version 2>/dev/null)" ]; then
  xcode-select --install 2>/dev/null
  while true; do
    sleep 5
    if [ -n "$(git --version 2>/dev/null)" ] && [ -n "$(xcode-select --print-path 2>/dev/null)" ]; then
      break;
    fi
  done
  echo "It looks like the other install is finishing up."
  echo "This installation will begin in one minute."
  sleep 60
else
  echo "XCode Command Line Tools already installed"
fi
}

fancy_echo "Installing XCode Command Line Tools ..."
fancy_echo "XCode Command Line Tools Installation Window May Be Behind This Window."
install_xcode_command_line_tools

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew tap homebrew/dupes
brew install apple-gcc42 && brew link apple-gcc42

brew_install_or_upgrade 'git'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'mysql'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'phantomjs'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'
echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
source ~/.bash_profile
brew_install_or_upgrade 'libyaml'
brew_install_or_upgrade 'libxml2'
brew_install_or_upgrade 'libxslt'

ruby_version=2.1.5

if ! rbenv versions | grep -Fq "$ruby_version"; then
  rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv exec gem update --system
gem_install_or_update 'rails'

fancy_echo "Configuring Bundler ..."
  gem_install_or_update 'bundler'
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Configuring template dotfiles ..."
if [ -d "$HOME/dotfiles" ]; then
  fancy_echo "Directory $HOME/dotfiles already exists. Skipping ..."
else
  git clone https://github.com/adamgeorgeson/dotfiles.git
fi
ln -nfs ~/dotfiles/vim/ .vim
ln -nfs ~/dotfiles/vimrc .vimrc
ln -nfs ~/dotfiles/bash_profile .bash_profile
ln -nfs ~/dotfiles/bash_aliases .bash_aliases
ln -nfs ~/dotfiles/gitconfig .gitconfig
source ~/.bash_profile
source ~/.bash_aliases

fancy_echo "Setting up VIM ..."
if [ -d "$HOME/.vim/bundle/Vundle.vim" ]; then
  fancy_echo "Vundle already installed. Skipping ..."
else
  fancy_echo "Installing Vundle ..."
  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
fi
fancy_echo "Open VIM and enter ':PluginInstall' to install plugins defined in .vimrc"

fancy_echo "Configuring MySQL ..."
unset TMPDIR
mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
mkdir -p ~/Library/LaunchAgents
cp $(brew --prefix mysql)/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
echo "Please edit the plist file (~/Library/LaunchAgents/homebrew.mxcl.mysql.plist) ensuring the following keys exist:"
echo "#..."
echo "<key>UserName</key>"
echo "<string>root</string>"
echo "#..."
echo "Complete? Type 'Yes' to continue."
read -p "Are you sure you want to continue? <y/Y/yes/Yes> " prompt
if [[ $prompt == "y" || $prompt == "Y" || $prompt == "yes" || $prompt == "Yes" ]]
then
  $(brew --prefix mysql)/bin/mysqladmin -u root password 'admin'
else
  "Please type 'yes' once you have added the UserName key to homebrew.mxcl.mysql.plist"
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

fancy_echo "####################################################################################"
fancy_echo "################################ Next Steps ########################################"
fancy_echo "####################################################################################"

fancy_echo "Next Steps:"
fancy_echo "Configure SSH Keys for GitHub: https://help.github.com/articles/generating-ssh-keys/"
fancy_echo "Install iTerm2: https://iterm2.com/downloads.html"
fancy_echo "Install Powerline fonts to ITerm2: https://github.com/powerline/fonts"

fancy_echo "####################################################################################"
fancy_echo "############################ COMPLETE : GO CODE!!! #################################"
fancy_echo "####################################################################################"
